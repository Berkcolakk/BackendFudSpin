// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentalHouseManagement.Context.Context;

#nullable disable

namespace RentalHouseManagement.Context.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20221220135930_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentalHouseManagement.Entities.Entities.Companies.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Identity")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("RentalHouseManagement.Entities.Entities.Language", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("EN")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("TR")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("RentalHouseManagement.Entities.Entities.Users.Title", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("RentalHouseManagement.Entities.Entities.Users.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Identity")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("NameSurname")
                        .HasColumnType("text");

                    b.Property<Guid>("Nationality")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid>("PlaceOfBirth")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondPassword")
                        .HasColumnType("text");

                    b.Property<Guid>("TitleID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TitleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RentalHouseManagement.Entities.Entities.Users.User", b =>
                {
                    b.HasOne("RentalHouseManagement.Entities.Entities.Users.Title", "PKUsersTitles")
                        .WithMany("Users")
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PKUsersTitles");
                });

            modelBuilder.Entity("RentalHouseManagement.Entities.Entities.Users.Title", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
