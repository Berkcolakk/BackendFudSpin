// <auto-generated />
using System;
using FudSpin.Context.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FudSpin.Context.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20230216162610_v0.6")]
    partial class v06
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FudSpin.Entities.Entities.Language", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.ParameterDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParameterMasterID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value2")
                        .HasColumnType("text");

                    b.Property<string>("Value3")
                        .HasColumnType("text");

                    b.Property<string>("Value4")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ParameterMasterID");

                    b.ToTable("ParameterDetail");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.ParameterMaster", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("boolean");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("ParameterMaster");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SpinnerMasterID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("SpinnerMasterID");

                    b.ToTable("SpinnerDetail");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerDetailSelection", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SpinnerDetailID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("SpinnerDetailID");

                    b.ToTable("SpinnerDetailSelection");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerMaster", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("SpinnerMaster");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CrtIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("CrtUserID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Identity")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("NameSurname")
                        .HasColumnType("text");

                    b.Property<Guid>("Nationality")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdIPAddress")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Nationality");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.ParameterDetail", b =>
                {
                    b.HasOne("FudSpin.Entities.Entities.ParameterMaster", "ParameterMaster_ParameterDetail")
                        .WithMany("ParameterMaster_ParameterDetail")
                        .HasForeignKey("ParameterMasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterMaster_ParameterDetail");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerDetail", b =>
                {
                    b.HasOne("FudSpin.Entities.Entities.SpinnerMaster", "IPSpinnerDetail")
                        .WithMany("IPSpinnerDetail")
                        .HasForeignKey("SpinnerMasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IPSpinnerDetail");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerDetailSelection", b =>
                {
                    b.HasOne("FudSpin.Entities.Entities.SpinnerDetail", "IPSpinnerDetailSelection")
                        .WithMany("SpinnerDetailSelection")
                        .HasForeignKey("SpinnerDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IPSpinnerDetailSelection");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerMaster", b =>
                {
                    b.HasOne("FudSpin.Entities.Entities.User", "IPSpinnerMaster")
                        .WithMany("IPSpinnerMaster")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IPSpinnerMaster");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.User", b =>
                {
                    b.HasOne("FudSpin.Entities.Entities.ParameterDetail", "ParameterDetail_Nationality")
                        .WithMany("ParameterDetail_Nationality")
                        .HasForeignKey("Nationality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterDetail_Nationality");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.ParameterDetail", b =>
                {
                    b.Navigation("ParameterDetail_Nationality");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.ParameterMaster", b =>
                {
                    b.Navigation("ParameterMaster_ParameterDetail");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerDetail", b =>
                {
                    b.Navigation("SpinnerDetailSelection");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.SpinnerMaster", b =>
                {
                    b.Navigation("IPSpinnerDetail");
                });

            modelBuilder.Entity("FudSpin.Entities.Entities.User", b =>
                {
                    b.Navigation("IPSpinnerMaster");
                });
#pragma warning restore 612, 618
        }
    }
}
